{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEFAULT_STATS","totalGames","totalSpins","totalMoneyWon","totalMoneyBet","totalBets","maxMoney","maxMoneyBet","maxWin","STAT_NAMES","StatRow","props","isMoney","name","includes","undefined","value","StatsView","Object","keys","stats","map","key","StorageKey","LOADED_GAME","str","localStorage","getItem","JSON","parse","LoadGame","EVEN_NUMBERS","ODD_NUMBERS","RED_NUMBERS","GOLD_NUMBERS","FIRST_12","SECOND_12","THIRD_12","ONE_TO_18","NINETEEN_TO_36","ROW_1","ROW_2","ROW_3","GetColor","n","indexOf","Number","IsRed","RollWheel","num","Math","floor","random","console","error","BET_PAYOUTS","straight","split","street","square","six","Reds","Blacks","Evens","Odds","Lows","Highs","Dozens","Columns","CHIP_DATA_KEY","UNORDERED_ARRAY_EQUAL","a","b","filter","ax","length","bx","Bet","onDrop","ev","preventDefault","dataTransfer","getData","onDragOver","onClick","style","cursor","flex","marginLeft","margin","color","textShadow","backgroundColor","border","alignItems","display","justifyContent","minWidth","minHeight","outline","roll","outlineOffset","flexDirection","placedBets","type","winsOn","Chip","index","chipIndex","size","winningBets","wb","CHIP_COLORS","marginTop","CHIP_VALUES","BetRow","content","vertical","betProps","column","start","i","push","onBet","InsideBets","row","width","CHIP_TEXT_COLOR","draggable","onDragStart","setData","toString","height","borderRadius","marginBottom","boxShadow","Or0","x","Equal0Undefined","Minus0Undefined","ChipArea","React","useState","currentChips","setCurrentChips","log","chips","chipsChanging","max","diffs","abs","DIFF_ARRAYS","useEffect","newLocalChips","incSize","min","setTimeout","maxIndex","forEach","v","c","columns","curCol","stackSize","padding","paddingBottom","borderLeft","borderRight","position","newChips","setChips","dropEffect","top","textAlign","left","right","WinsOnToType","DEFAULT_CHIPS","GetBetPayout","bet","App","setVertical","hasSpun","setHasSpun","hasBet","setHasBet","setRoll","bets","setBets","setShowWinnings","gameStats","setGameStats","totalMoney","reduce","p","currentWinnings","game","setItem","stringify","addBet","useCallback","newBets","moneyBet","moveChip","createBetProps","gameOver","Header","marginRight","title","rollResult","winnings","wonBet","newTotalMoney","fontWeight","fontSize","className","bottom","zIndex","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a511118.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\ninterface Stats {\n  totalGames: number,\n  totalSpins: number,\n  totalMoneyWon: number,\n  totalMoneyBet: number,\n  totalBets: number,\n  maxMoney: number,\n  maxMoneyBet: number,\n  maxWin: number,\n}\nconst DEFAULT_STATS = {\n  totalGames: 1,\n  totalSpins: 0,\n  totalMoneyWon: 0,\n  totalMoneyBet: 0,\n  totalBets: 0,\n  maxMoney: 0,\n  maxMoneyBet: 0,\n  maxWin: 0,\n}\n\ntype StatNames = {\n  [Property in keyof Stats]: string;\n};\n\nconst STAT_NAMES: StatNames = {\n  totalGames: \"Total games played\",\n  totalSpins: \"Total spins\",\n  totalMoneyWon: \"Total money won\",\n  totalMoneyBet: \"Total money bet\",\n  totalBets: \"Total bets\",\n  maxMoney: \"Max money\",\n  maxMoneyBet: \"Max money bet\",\n  maxWin: \"Max money payed out\",\n}\n\nfunction StatRow(props: { name: string, value: string | number }) {\n  const isMoney = props.name.includes(\"money\");\n  return <div>{props.name}: {isMoney ? \"$\" : undefined}{props.value}</div>\n}\n\nfunction StatsView(props: { stats: Stats }) {\n  return <div>\n    {Object.keys(props.stats).map((key: any) => <StatRow name={STAT_NAMES[key as keyof Stats]} value={props.stats[key as keyof Stats]} />)}\n  </div>\n}\n\ninterface CurrentGame {\n  stats: Stats,\n  chips: number[],\n  bets: PlacedBet[],\n  vertical: boolean,\n}\n\nfunction GameView(props: { stats: CurrentGame }) {\n\n}\n\ninterface SaveFile {\n  currentGame: CurrentGame,\n  allTimeStats: Stats,\n}\n\nconst StorageKey = \"WowRoulette...Cheater\";\nfunction SaveGame(game: CurrentGame) {\n  localStorage.setItem(StorageKey, JSON.stringify(game));\n}\n\nfunction LoadGame(): CurrentGame | null {\n  const str = localStorage.getItem(StorageKey);\n  if (!str) { return null; }\n  return JSON.parse(str);\n}\n\nconst LOADED_GAME = LoadGame();\n\nconst EVEN_NUMBERS = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36];\nconst ODD_NUMBERS = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35];\n\nconst RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];\nconst GOLD_NUMBERS = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35];\n\nconst FIRST_12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst SECOND_12 = [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24];\nconst THIRD_12 = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36];\n\nconst ONE_TO_18 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\nconst NINETEEN_TO_36 = [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36];\n\nconst ROW_1 = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34];\nconst ROW_2 = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35];\nconst ROW_3 = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36];\n\nfunction IsRed(n: number | string) {\n  return RED_NUMBERS.indexOf(Number(n)) >= 0;\n}\n\nfunction GetColor(n: number | string) {\n  return IsRed(n) ? \"rgb(255,80,80)\" : \"gold\"\n}\n\nfunction RollWheel(): number {\n  const num = Math.floor(Math.random() * 37) - 1;\n  if (num < 0 || num > 36) {\n    console.error(\"WOAH!! What are the odds??\");\n    return RollWheel();\n  }\n  return num;\n}\n\nexport const INSIDE_BET_PAYOUTS = {\n  // Insides\n  straight: 35, // 1 number\n  split: 17, // 2 numbers\n  street: 11, // 3 numbers\n  square: 8, // 4 numbers\n  six: 5, // ...realy? its 6 numbers duh\n}\n\nexport const OUTSIDE_BET_PAYOUTS = {\n  // Outsides\n  Reds: 1,\n  Blacks: 1,\n  Evens: 1,\n  Odds: 1,\n  Lows: 1,\n  Highs: 1,\n  Dozens: 2,\n  Columns: 2\n}\n\nexport type PAYOUTS = typeof INSIDE_BET_PAYOUTS & typeof OUTSIDE_BET_PAYOUTS;\n\nexport const BET_PAYOUTS: PAYOUTS = {\n  ...INSIDE_BET_PAYOUTS,\n  ...OUTSIDE_BET_PAYOUTS,\n};\n\nexport type BetTypes = keyof PAYOUTS;\n\nconst CHIP_DATA_KEY = \"text\";\n\nfunction UNORDERED_ARRAY_EQUAL(a: number[], b: number[]) {\n  return a.filter(ax => b.includes(ax)).length == a.length && b.filter(bx => a.includes(bx)).length == b.length;\n}\n\nfunction Bet(props: {\n  onClick?: () => void,\n  name: string | number,\n  color?: string,\n  flex?: number | string,\n  margin?: number,\n  type?: BetTypes,\n  winsOn?: number[],\n  onDrop?: (index: number) => void,\n  placedBets?: PlacedBet[],\n  winningBets?: PlacedBet[],\n  roll?: number,\n}) {\n  return <div\n    onDrop={props.onDrop ? (ev) => {\n      ev.preventDefault();\n      props.onDrop?.(Number(ev.dataTransfer.getData(CHIP_DATA_KEY)));\n    } : undefined}\n    onDragOver={props.onDrop ? (ev) => {\n      ev.preventDefault();\n    } : undefined}\n    onClick={props.onClick}\n    style={{\n      cursor: props.onClick ? \"pointer\" : undefined,\n      flex: props.flex,\n      marginLeft: props.margin,\n      color: props.color || GetColor(props.name),\n      textShadow: `1px 2px rgba(0,0,0,.7)`,\n      backgroundColor: \"green\",\n      border: \"1px solid gold\",\n      alignItems: \"center\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      minWidth: 70,\n      minHeight: 70,\n      outline: props.roll == props.name ? \"10px solid gold\" : undefined,\n      outlineOffset: -10,\n    }}>\n    {props.name}\n    {/* This is for PLACED BETS, only straight and other types currently. all other smaller inside bets arent done... */}\n    <div style={{ display: \"flex\", flexDirection: \"column-reverse\" }}>\n      {props.placedBets?.filter(b => {\n        return b.type == \"straight\" && b.winsOn.includes(Number(props.name));\n      }).map(b => <Chip index={b.chipIndex} size={20} />)}\n    </div>\n    <div style={{ display: \"flex\", flexDirection: \"column-reverse\" }}>\n      {props.winsOn && props.placedBets?.filter(b => {\n        return b.type == props.type && UNORDERED_ARRAY_EQUAL(b.winsOn, props.winsOn!);\n      }).map(b => <Chip index={b.chipIndex} size={20} />)}\n    </div>\n\n    <div style={{ display: \"flex\", flexDirection: \"column-reverse\" }}>\n      {props.winsOn && props.winningBets?.filter(wb => {\n        return wb.type == props.type && UNORDERED_ARRAY_EQUAL(wb.winsOn, props.winsOn!);\n      }).map(wb => <div style={{ color: CHIP_COLORS[wb.chipIndex], marginTop: -20 }}>+${(CHIP_VALUES[wb.chipIndex]) * (BET_PAYOUTS[wb.type] + 1)}</div>)}\n    </div>\n  </div>\n}\n\nfunction BetRow(props: {\n  start: number,\n  length: number,\n  startColor?: string,\n  onBet?: (betIndexes: number[], chipIndex: number) => void,\n  placedBets?: PlacedBet[],\n  winningBets?: PlacedBet[],\n  roll?: number,\n  vertical?: boolean,\n}) {\n  const content = [];\n  const { placedBets, winningBets, roll, vertical } = props;\n  const betProps = { placedBets, winningBets, roll };\n  const column = vertical ? \"row\" : \"column\";\n  const row = vertical ? \"column\" : \"row\";\n  for (var i = 0; i < props.length; i++) {\n    const num = props.start + i;\n    content.push(<Bet\n      {...betProps}\n      name={num}\n      onDrop={props.onBet ? (chipIndex) => { props.onBet?.([num], chipIndex); } : undefined}\n    />)\n  }\n  return <div style={{ display: \"flex\", flexDirection: column }}>\n    {content}\n  </div>\n}\n\nfunction InsideBets(props: {\n  onBet: (winsOnIndexes: number[], chipIndex: number) => void,\n  placedBets?: PlacedBet[],\n  winningBets?: PlacedBet[],\n  roll?: number,\n  vertical?: boolean,\n}) {\n  const { placedBets, winningBets, roll, vertical } = props;\n  const betProps = { placedBets, winningBets, roll };\n\n  const column = vertical ? \"row\" : \"column\";\n  const row = vertical ? \"column\" : \"row\";\n\n  const rows = 3;\n  const cols = 36 / rows;\n  const content = [<Bet name=\"0\" {...betProps} />];\n  for (var i = 0; i < cols; i++) {\n    if (i % 4 == 0) {\n      content.push(<div style={{ width: 4, backgroundColor: \"green\" }}></div>)\n    }\n    content.push(<BetRow vertical={vertical} {...betProps} start={i * rows + 1} length={rows} onBet={props.onBet} />)\n  }\n  content.push(<div style={{ width: 4, backgroundColor: \"green\" }}></div>)\n  return <div style={{ display: \"inline-flex\", flexDirection: row, justifyContent: \"center\" }}>\n    {content}\n    <div style={{ display: \"flex\", flexDirection: column }}>\n      <Bet {...betProps} name=\"2to1\" type=\"Columns\" winsOn={ROW_1} onDrop={props.onBet ? (chipIndex) => { props.onBet(ROW_1, chipIndex) } : undefined} />\n      <Bet {...betProps} name=\"2to1\" type=\"Columns\" winsOn={ROW_2} onDrop={props.onBet ? (chipIndex) => { props.onBet(ROW_2, chipIndex) } : undefined} />\n      <Bet {...betProps} name=\"2to1\" type=\"Columns\" winsOn={ROW_3} onDrop={props.onBet ? (chipIndex) => { props.onBet(ROW_3, chipIndex) } : undefined} />\n    </div>\n  </div>\n}\n\nconst CHIP_VALUES = [1, 5, 25, 50, 100, 500, 1000];\nconst CHIP_COLORS = [\"white\", \"red\", \"blue\", \"orange\", \"grey\", \"teal\", \"lightgreen\"];\nconst CHIP_TEXT_COLOR = [\"black\", \"white\", \"white\", \"black\", \"white\", \"white\", \"black\"];\n\nfunction Chip(props: {\n  index: number,\n  size?: number,\n  onClick?: () => void,\n  draggable?: boolean,\n}) {\n  const size = props.size || 50;\n  return <div\n    draggable={props.draggable}\n    onDragStart={props.draggable ? (ev) => {\n      ev.dataTransfer.setData(CHIP_DATA_KEY, props.index.toString());\n    } : undefined}\n    style={{\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      color: CHIP_TEXT_COLOR[props.index],\n      height: size,\n      width: size,\n      cursor: props.draggable ? \"grab\" : undefined,\n      borderRadius: size,\n      backgroundColor: CHIP_COLORS[props.index],\n      marginBottom: -.85 * size,\n      border: `2px solid black`,\n      boxShadow: '0px 3px 0px black',\n    }}>\n    {size > 30 ? CHIP_VALUES[props.index] : undefined}\n  </div>\n}\n\nfunction Or0(x?: number) {\n  return x || 0;\n}\n\nfunction Equal0Undefined(a: number, b: number) {\n  return Or0(a) == Or0(b);\n}\n\nfunction Minus0Undefined(a: number, b: number) {\n  return Or0(a) - Or0(b)\n}\n\n// 0 and undefined are equivalent\nfunction DIFF_ARRAYS(a: number[], b: number[]) {\n  const length = Math.max(a.length, b.length);\n  let diffs = 0;\n  for (let i = 0; i < length; i++) {\n    if (!Equal0Undefined(a[i], b[i])) {\n      diffs += Math.abs(Minus0Undefined(a[i], b[i]));\n    }\n  }\n\n  return diffs;\n}\n\n// This is gross lol\nfunction ChipArea(props: {\n  chips: number[],\n  onClick?: (index: number) => void,\n  setChips?: (newChips: number[]) => void,\n}) {\n\n  const [currentChips, setCurrentChips] = React.useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n\n  console.log(props.chips, currentChips);\n\n  const chipsChanging = DIFF_ARRAYS(currentChips, props.chips);\n  React.useEffect(() => {\n    if (chipsChanging) {\n      console.log(`Updating chips ${chipsChanging}`);\n      const newLocalChips = [...currentChips];\n\n      let incSize = 1;\n      if (chipsChanging > 10) {\n        incSize = 5;\n      }\n      if (chipsChanging > 25) {\n        incSize = 10;\n      }\n      if (chipsChanging > 50) {\n        incSize = 25;\n      }\n\n      // go from bottom to top and add one at a time\n      for (let i = 10; i >= 0; i--) {\n        if (Or0(currentChips[i]) > Or0(props.chips[i])) {\n          newLocalChips[i] = Or0(newLocalChips[i]);\n          // min of the DIFF from \n          // used to be --!\n          newLocalChips[i] -= Math.min(incSize, Or0(newLocalChips[i]) - Or0(props.chips[i]));\n          setTimeout(() => {\n            setCurrentChips(newLocalChips);\n          }, 100);\n          return;\n        }\n        else if ((currentChips[i] || 0) < (props.chips[i] || 0)) {\n          newLocalChips[i] = newLocalChips[i] || 0;\n          //newLocalChips[i]++;\n          newLocalChips[i] += Math.min(incSize, Or0(props.chips[i]) - Or0(newLocalChips[i]));\n          setTimeout(() => {\n            setCurrentChips(newLocalChips);\n          }, 100);\n          return;\n        }\n      }\n    }\n    else {\n      console.log(\"DONE?\");\n    }\n  }, [currentChips, props.chips, chipsChanging]);\n\n  // only show co0;\n  let maxIndex = 0;\n  currentChips.forEach((v, i) => {\n    if (v > 0) { maxIndex = i; }\n  });\n  console.log(maxIndex);\n\n  return <div style={{ display: \"flex\", backgroundColor: \"green\", justifyContent: \"center\", height: 200, marginTop: 10 }}>\n    {currentChips.filter((c, i) => i <= maxIndex + 1).map((c, i) => {\n      let columns = [];\n      let curCol = [];\n      const stackSize = 10;\n      for (let x = 0; x < c; x++) {\n        if (x % stackSize == 0 && curCol.length > 0) {\n          columns.push(<div style={{\n            display: \"flex\",\n            flexDirection: \"column-reverse\",\n            margin: 2,\n          }}>{curCol}</div>);\n          curCol = [];\n        }\n        curCol.push(<Chip index={i} draggable={!chipsChanging && (x == c - 1 || x % stackSize == stackSize - 1)} />)\n      }\n      if (curCol.length > 0) {\n        columns.push(<div style={{\n          display: \"flex\",\n          flexDirection: \"column-reverse\",\n          margin: 2,\n        }}>{curCol}</div>);\n      }\n      return <><div style={{\n        display: \"flex\",\n        minWidth: 80,\n        justifyContent: \"center\",\n        padding: 10,\n        paddingBottom: 50,\n        margin: 2,\n        borderLeft: \"1px solid gold\",\n        borderRight: \"1px solid gold\", position: \"relative\"\n      }}>\n        <div\n          onDrop={ev => {\n            ev.preventDefault();\n            const chipIndex = Number(ev.dataTransfer.getData(CHIP_DATA_KEY));\n            if (chipIndex != i) {\n              console.log(`Trading chip ${chipIndex} ($${CHIP_VALUES[chipIndex]}) for ${i} ($${CHIP_VALUES[i]})`);\n              if (chipIndex < i) {\n                // we are trading in for a bigger coin\n                if (props.chips[chipIndex] * CHIP_VALUES[chipIndex] >= CHIP_VALUES[i]) {\n                  const newChips = [...props.chips];\n                  newChips[i] = Or0(newChips[i]);\n                  newChips[chipIndex] = Or0(newChips[chipIndex]);\n\n                  newChips[chipIndex] -= Math.floor(CHIP_VALUES[i] / CHIP_VALUES[chipIndex]);\n                  newChips[i]++;\n                  props.setChips?.(newChips);\n                }\n              }\n              else {\n                // we are trading for a lower coin\n                // this is probably OK, since we should be dragging it FROM the stack...\n                if (props.chips[chipIndex] > 0) {\n                  const newChips = [...props.chips];\n                  newChips[i] = Or0(newChips[i]);\n                  newChips[chipIndex] = Or0(newChips[chipIndex]);\n\n                  newChips[chipIndex]--;\n                  newChips[i] += Math.floor(CHIP_VALUES[chipIndex] / CHIP_VALUES[i]);\n                  props.setChips?.(newChips);\n                }\n              }\n            }\n          }}\n          onDragOver={ev => {\n            const chipIndex = Number(ev.dataTransfer.getData(CHIP_DATA_KEY));\n            if (chipIndex != i) {\n              console.log(`Trading chip ${chipIndex} ($${CHIP_VALUES[chipIndex]}) for ${i} ($${CHIP_VALUES[i]})`);\n              if (chipIndex < i) {\n                // we are trading in for a bigger coin\n                if (props.chips[chipIndex] * CHIP_VALUES[chipIndex] >= CHIP_VALUES[i]) {\n                  ev.preventDefault();\n                  ev.dataTransfer.dropEffect = \"copy\";\n                }\n              }\n              else {\n                // we are trading for a lower coin\n                // this is probably OK, since we should be dragging it FROM the stack...\n                if (props.chips[chipIndex] > 0) {\n                  ev.preventDefault();\n                  ev.dataTransfer.dropEffect = \"copy\";\n                }\n              }\n            }\n          }}\n          style={{ position: \"absolute\", top: 0, textAlign: \"center\", left: 0, right: 0, }}>${CHIP_VALUES[i]}</div>\n        {columns}\n      </div>\n        {/* {props.setChips && props.chips[i + 1] != undefined ?\n          <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", margin: 10, }}>\n            {props.chips[i + 1] > 0 ? <div>\n              <button onClick={()=>{\n                const newChips = [...props.chips];\n                newChips[i+1]--;\n                newChips[i] += Math.floor(CHIP_VALUES[i+1] / CHIP_VALUES[i]);\n                props.setChips?.(newChips);\n              }} style={{ fontSize: 14 }}>{\"<--\"}</button></div> : undefined}\n            {(props.chips[i] * CHIP_VALUES[i] >= CHIP_VALUES[i + 1]) ? <div>\n              <button  onClick={()=>{\n                const newChips = [...props.chips];\n                newChips[i] -= Math.floor(CHIP_VALUES[i+1] / CHIP_VALUES[i]);\n                newChips[i+1]++;\n                props.setChips?.(newChips);\n              }} style={{ fontSize: 14 }}>{\"-->\"}</button></div>: undefined}\n          </div> \n          : undefined} */}\n      </>;\n    })}\n  </div>\n}\n\ninterface PlacedBet {\n  type: BetTypes,\n  chipIndex: number,\n  winsOn: number[],\n}\n\nfunction WinsOnToType(winsOn: number[]): BetTypes {\n  switch (winsOn.length) {\n    case 1:\n      return \"straight\";\n    case 2:\n      return \"split\";\n    case 3:\n      return \"street\";\n    case 4: return \"square\";\n    case 12: return \"Columns\";\n    default:\n      throw \"HEY! bad type!\";\n  }\n}\n\nconst DEFAULT_CHIPS = [10, 5, 1];\n\nfunction GetBetPayout(bet: PlacedBet) {\n  return CHIP_VALUES[bet.chipIndex] * (BET_PAYOUTS[bet.type] + 1);\n}\n\nfunction App() {\n  const [vertical, setVertical] = React.useState(!!LOADED_GAME?.vertical);\n  const column = vertical ? \"row\" : \"column\";\n  const row = vertical ? \"column\" : \"row\";\n\n  const [hasSpun, setHasSpun] = React.useState(false);\n  const [hasBet, setHasBet] = React.useState(false);\n  const [roll, setRoll] = React.useState(0);\n  const [bets, setBets] = React.useState<PlacedBet[]>(LOADED_GAME?.bets || []);\n  const [chips, setChips] = React.useState(LOADED_GAME?.chips || [...DEFAULT_CHIPS]);\n\n  const [winningBets, setShowWinnings] = React.useState<PlacedBet[]>([]);\n\n  const [gameStats, setGameStats] = React.useState<Stats>(LOADED_GAME?.stats || { ...DEFAULT_STATS });\n\n  const totalMoney = chips.reduce((p, c, i) => {\n    return p + (c * CHIP_VALUES[i]);\n  }, 0);\n\n  const currentWinnings = winningBets.reduce((p, bet, i) => {\n    return p + GetBetPayout(bet);\n  }, 0);\n\n  React.useEffect(() => {\n    SaveGame({\n      bets,\n      chips,\n      stats: gameStats,\n      vertical,\n    });\n  }, [chips, bets, winningBets, gameStats])\n\n  const addBet = React.useCallback((bet: PlacedBet) => {\n    setHasBet(true);\n    const newBets = [...bets, bet];\n    setBets(newBets);\n\n    setGameStats(stats => ({ ...stats, totalBets: stats.totalBets + 1, totalMoneyBet: stats.totalMoneyBet + CHIP_VALUES[bet.chipIndex] }));\n\n    // sum all bets (DO THNIS IN ADD BET)\n    const moneyBet = newBets.reduce((p, c) => {\n      return p + CHIP_VALUES[c.chipIndex];\n    }, 0);\n\n    if (moneyBet > gameStats.maxMoneyBet) {\n      setGameStats(stats => ({ ...stats, maxMoneyBet: moneyBet }));\n    }\n  }, [bets, setBets, setGameStats]);\n\n  const moveChip = (chipIndex: number) => {\n    let c = [...chips];\n    c[chipIndex] = Math.max(0, c[chipIndex] - 1);\n    setChips(c);\n  }\n\n  function createBetProps(winsOn: number[], type: BetTypes) {\n    return {\n      winsOn,\n      type,\n      onDrop: (chipIndex: number) => {\n        addBet({ chipIndex, winsOn, type });\n        moveChip(chipIndex);\n      },\n      placedBets: bets,\n      winningBets,\n      roll,\n    }\n  }\n\n  const gameOver = totalMoney == 0 && bets.length == 0;\n\n  const Header = <div style={{ position: \"relative\", display: \"flex\", flexDirection: row, alignItems: \"center\", justifyContent: \"center\", margin: \"10px 50px\" }}>\n    <h1 style={{ marginRight: vertical ? undefined : \"auto\", position: vertical ? undefined : \"absolute\", left: 50 }}>Roulette</h1>\n\n    <button title=\"Spin the wheel\" style={{\n      borderRadius: 100,\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      textAlign: \"center\",\n      height: 90,\n      width: 90,\n      color: GetColor(roll),\n    }} onClick={() => {\n      if (bets.length > 0) {\n        setGameStats(stats => ({ ...stats, totalSpins: stats.totalSpins + 1 }));\n      }\n      setHasSpun(true);\n      const rollResult = RollWheel();\n      setRoll(rollResult);\n\n      // check all bets\n      const winningBets = bets.filter(b => b.winsOn.includes(rollResult));\n      setShowWinnings(winningBets);\n      setBets([]);\n\n      // do stats for winnings!\n      const winnings = winningBets.reduce((p, c) => {\n        return p + GetBetPayout(c);\n      }, 0);\n\n\n      // ok pay them out!\n      const newChips = [...chips];\n      for (const wonBet of winningBets) {\n        newChips[wonBet.chipIndex] += BET_PAYOUTS[wonBet.type] + 1; // 1 is YOUR chip which you get back.\n        // WOW, winning a bet pays a LOT for a number.\n      }\n      setChips(newChips);\n\n      const newTotalMoney = chips.reduce((p, c, i) => {\n        return p + (c * CHIP_VALUES[i]);\n      }, 0);\n\n      setGameStats(stats => ({\n        ...stats,\n        totalMoneyWon: stats.totalMoneyWon + winnings,\n        maxWin: Math.max(stats.maxWin, winnings),\n        maxMoney: Math.max(stats.maxMoney, newTotalMoney)\n      }));\n\n    }}>{roll}</button>\n\n    {!hasSpun ? <div style={{ color: \"white\", fontWeight: 300, fontSize: 18, marginLeft: 0, position: vertical ? undefined : \"absolute\", left: \"calc(50% + 60px)\" }}> {\"Click to spin the wheel\"} </div> : undefined}\n\n    <div style={{ backgroundColor: \"green\", fontSize: 24, padding: 10, color: \"gold\", marginLeft: vertical ? undefined : \"auto\", right: 50, position: vertical ? undefined : \"absolute\" }}>\n      $<span style={{ textShadow: \"1px 2px rgba(0,0,0,.5)\" }}>{totalMoney}</span>\n      {currentWinnings > 0 ? <span style={{ color: \"white\" }}> +${currentWinnings}</span> : undefined}\n    </div>\n  </div>;\n\n  return (\n    <div className=\"App\">\n\n      {gameOver ? <div style={{ position: \"absolute\", top: 100, left: 100, right: 100, bottom: 100, backgroundColor: \"green\", zIndex: 1000, border: \"16px double gold\" }}>\n        <h2>\n          Game over!\n        </h2>\n\n        <button onClick={() => {\n          setGameStats(stats => ({ ...stats, totalGames: stats.totalGames + 1 }));\n          setChips([...DEFAULT_CHIPS]);\n          setBets([]);\n          setShowWinnings([]);\n          // TODO: update game stats\n        }}>New Game?</button>\n      </div> : null}\n\n      {vertical ? null : Header}\n\n      <div style={{ display: \"flex\", flexDirection: column, justifyContent: \"center\", alignItems: \"center\" }}>\n        {/* All bets area */}\n        <div style={{ display: \"inline-flex\", flexDirection: column, margin: 10 }}>\n          <InsideBets vertical={vertical} placedBets={bets} roll={roll} winningBets={winningBets} onBet={(winsOn, chipIndex) => {\n            moveChip(chipIndex);\n            // OK we really need a way to IDENTIFY the different BETS. Like an ID or code.\n            addBet({\n              chipIndex,\n              type: WinsOnToType(winsOn),\n              winsOn,\n            })\n          }} />\n          <div style={{ display: \"flex\", flexDirection: row, justifyContent: \"end\", marginTop: 4 }}>\n            <div style={{ flex: 1 }}></div>\n            <Bet name=\"1st 12\" flex=\"4\" margin={4} {...createBetProps(FIRST_12, \"Dozens\")} />\n            <Bet name=\"2nd 12\" flex=\"4\" margin={4} {...createBetProps(SECOND_12, \"Dozens\")} />\n            <Bet name=\"3rd 12\" flex=\"4\" margin={4}  {...createBetProps(THIRD_12, \"Dozens\")} />\n            <div style={{ width: 4 }}></div>\n            <div style={{ flex: 1 }}></div>\n          </div>\n          <div style={{ display: \"flex\", flexDirection: row, justifyContent: \"end\", marginTop: 4 }}>\n            <div style={{ flex: 1 }}></div>\n            <Bet name=\"1-18\" flex={2} margin={4}  {...createBetProps(ONE_TO_18, \"Lows\")} />\n            <Bet name=\"EVEN\" flex={2} margin={4} {...createBetProps(EVEN_NUMBERS, \"Evens\")} />\n            <Bet name=\"RED\" color=\"red\" flex={2} margin={4} {...createBetProps(RED_NUMBERS, \"Reds\")} />\n            <Bet name=\"GOLD\" flex={2} margin={4}  {...createBetProps(GOLD_NUMBERS, \"Blacks\")} />\n            <Bet name=\"ODD\" flex={2} margin={4}  {...createBetProps(ODD_NUMBERS, \"Odds\")} />\n            <Bet name=\"19-36\" flex={2} margin={4}  {...createBetProps(NINETEEN_TO_36, \"Highs\")} />\n            <div style={{ width: 4 }}></div>\n            <div style={{ flex: 1 }}></div>\n          </div>\n        </div>\n\n        <div>\n          {vertical ? Header : null}\n          <ChipArea chips={chips} setChips={setChips} />\n          <StatsView stats={gameStats} />\n          {!hasBet ? <div style={{ color: \"white\", fontWeight: 300, fontSize: 18, maxWidth: 400 }}> {\"Drag your chips to a square to place bets. Or drag between columns to exchange for different chips.\"} </div> : undefined}\n          <button style={{ position: \"absolute\", bottom: 0, right: 0 }} onClick={() => setVertical(!vertical)}>Rotate</button>\n        </div>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}