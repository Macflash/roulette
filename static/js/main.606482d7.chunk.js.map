{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["EVEN_NUMBERS","ODD_NUMBERS","RED_NUMBERS","GOLD_NUMBERS","FIRST_12","SECOND_12","THIRD_12","ONE_TO_18","NINETEEN_TO_36","ROW_1","ROW_2","ROW_3","GetColor","n","indexOf","Number","IsRed","RollWheel","num","Math","floor","random","console","error","BET_PAYOUTS","straight","split","street","square","six","Reds","Blacks","Evens","Odds","Lows","Highs","Dozens","Columns","CHIP_DATA_KEY","Bet","props","onDrop","ev","preventDefault","dataTransfer","getData","undefined","onDragOver","onClick","style","cursor","flex","marginLeft","margin","color","name","textShadow","backgroundColor","border","alignItems","display","justifyContent","minWidth","minHeight","flexDirection","placedBets","filter","b","type","winsOn","includes","map","Chip","index","chipIndex","size","a","ax","length","bx","ARRAY_EQUAL","BetRow","content","start","i","push","onBet","InsideBets","width","CHIP_VALUES","CHIP_COLORS","draggable","onDragStart","setData","toString","height","borderRadius","marginBottom","boxShadow","ChipArea","chips","c","columns","curCol","x","stackSize","padding","paddingBottom","borderLeft","borderRight","position","log","newChips","setChips","dropEffect","top","textAlign","left","right","WinsOnToType","App","React","useState","roll","setRoll","bets","setBets","totalMoney","reduce","p","addBet","useCallback","bet","moveChip","max","createBetProps","className","marginTop","fontSize","rollResult","winningBets","wonBet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.606482d7.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst EVEN_NUMBERS = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36];\nconst ODD_NUMBERS = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35];\n\nconst RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];\nconst GOLD_NUMBERS = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35];\n\nconst FIRST_12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst SECOND_12 = [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24];\nconst THIRD_12 = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36];\n\nconst ONE_TO_18 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\nconst NINETEEN_TO_36 = [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36];\n\nconst ROW_1 = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34];\nconst ROW_2 = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35];\nconst ROW_3 = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36];\n\nfunction IsRed(n: number | string) {\n  return RED_NUMBERS.indexOf(Number(n)) >= 0;\n}\n\nfunction GetColor(n: number | string) {\n  return IsRed(n) ? \"rgb(255,80,80)\" : \"gold\"\n}\n\nfunction RollWheel(): number {\n  const num = Math.floor(Math.random() * 37) - 1;\n  if (num < 0 || num > 36) {\n    console.error(\"WOAH!! What are the odds??\");\n    return RollWheel();\n  }\n  return num;\n}\n\nexport const INSIDE_BET_PAYOUTS = {\n  // Insides\n  straight: 35, // 1 number\n  split: 17, // 2 numbers\n  street: 11, // 3 numbers\n  square: 8, // 4 numbers\n  six: 5, // ...realy? its 6 numbers duh\n}\n\nexport const OUTSIDE_BET_PAYOUTS = {\n  // Outsides\n  Reds: 1,\n  Blacks: 1,\n  Evens: 1,\n  Odds: 1,\n  Lows: 1,\n  Highs: 1,\n  Dozens: 2,\n  Columns: 2\n}\n\nexport type PAYOUTS = typeof INSIDE_BET_PAYOUTS & typeof OUTSIDE_BET_PAYOUTS;\n\nexport const BET_PAYOUTS: PAYOUTS = {\n  ...INSIDE_BET_PAYOUTS,\n  ...OUTSIDE_BET_PAYOUTS,\n};\n\nexport type BetTypes = keyof PAYOUTS;\n\nconst CHIP_DATA_KEY = \"text\";\n\nfunction ARRAY_EQUAL(a: number[], b: number[]) {\n  return a.filter(ax => b.includes(ax)).length == a.length && b.filter(bx => a.includes(bx)).length == b.length;\n}\n\nfunction Bet(props: {\n  onClick?: () => void,\n  name: string | number,\n  color?: string,\n  flex?: number | string,\n  margin?: number,\n  type?: BetTypes,\n  winsOn?: number[],\n  onDrop?: (index: number) => void,\n  placedBets?: PlacedBet[],\n}) {\n  return <div\n    onDrop={props.onDrop ? (ev) => {\n      ev.preventDefault();\n      props.onDrop?.(Number(ev.dataTransfer.getData(CHIP_DATA_KEY)));\n    } : undefined}\n    onDragOver={props.onDrop ? (ev) => {\n      ev.preventDefault();\n    } : undefined}\n    onClick={props.onClick}\n    style={{\n      cursor: props.onClick ? \"pointer\" : undefined,\n      flex: props.flex,\n      marginLeft: props.margin,\n      color: props.color || GetColor(props.name),\n      textShadow: `1px 2px rgba(0,0,0,.7)`,\n      backgroundColor: \"green\",\n      border: \"1px solid gold\",\n      alignItems: \"center\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      minWidth: 70,\n      minHeight: 70,\n    }}>\n    {props.name}\n    <div style={{ display: \"flex\", flexDirection: \"column-reverse\" }}>\n      {props.placedBets?.filter(b => {\n        return b.type == \"straight\" && b.winsOn.includes(Number(props.name));\n      }).map(b => <Chip index={b.chipIndex} size={20} />)}\n    </div>\n    <div style={{ display: \"flex\", flexDirection: \"column-reverse\" }}>\n      {props.winsOn && props.placedBets?.filter(b => {\n        return b.type == props.type && ARRAY_EQUAL(b.winsOn, props.winsOn!);\n      }).map(b => <Chip index={b.chipIndex} size={20} />)}\n    </div>\n  </div>\n}\n\nfunction BetRow(props: { start: number, length: number, startColor?: string, onBet?: (betIndexes: number[], chipIndex: number) => void, placedBets?: PlacedBet[], }) {\n  const content = [];\n  for (var i = 0; i < props.length; i++) {\n    const num = props.start + i;\n    content.push(<Bet\n      placedBets={props.placedBets}\n      name={num}\n      onDrop={props.onBet ? (chipIndex) => { props.onBet?.([num], chipIndex); } : undefined}\n    />)\n  }\n  return <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n    {content}\n  </div>\n}\n\nfunction InsideBets(props: { onBet: (winsOnIndexes: number[], chipIndex: number) => void, placedBets?: PlacedBet[], }) {\n  const rows = 3;\n  const cols = 36 / rows;\n  const content = [<Bet name=\"0\" />];\n  for (var i = 0; i < cols; i++) {\n    if (i % 4 == 0) {\n      content.push(<div style={{ width: 4, backgroundColor: \"green\" }}></div>)\n    }\n    content.push(<BetRow placedBets={props.placedBets} start={i * rows + 1} length={rows} onBet={props.onBet} />)\n  }\n  content.push(<div style={{ width: 4, backgroundColor: \"green\" }}></div>)\n  return <div style={{ display: \"inline-flex\", flexDirection: \"row\", justifyContent: \"center\" }}>\n    {content}\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <Bet placedBets={props.placedBets} name=\"2to1\"  type=\"Columns\" winsOn={ROW_1} onDrop={props.onBet ? (chipIndex) => { props.onBet(ROW_1, chipIndex) } : undefined} />\n      <Bet placedBets={props.placedBets} name=\"2to1\" type=\"Columns\" winsOn={ROW_2} onDrop={props.onBet ? (chipIndex) => { props.onBet(ROW_2, chipIndex) } : undefined} />\n      <Bet placedBets={props.placedBets} name=\"2to1\" type=\"Columns\" winsOn={ROW_3} onDrop={props.onBet ? (chipIndex) => { props.onBet(ROW_3, chipIndex) } : undefined} />\n    </div>\n  </div>\n}\n\nconst CHIP_VALUES = [1, 5, 25, 50, 100, 500, 1000];\nconst CHIP_COLORS = [\"white\", \"red\", \"blue\", \"orange\", \"grey\"];\n\nfunction Chip(props: {\n  index: number,\n  size?: number,\n  onClick?: () => void,\n  draggable?: boolean,\n}) {\n  const size = props.size || 50;\n  return <div\n    draggable={props.draggable}\n    onDragStart={props.draggable ? (ev) => {\n      ev.dataTransfer.setData(CHIP_DATA_KEY, props.index.toString());\n    } : undefined}\n    style={{\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      color: \"black\",\n      height: size,\n      width: size,\n      cursor: props.draggable ? \"grab\" : undefined,\n      borderRadius: size,\n      backgroundColor: CHIP_COLORS[props.index],\n      marginBottom: -.85 * size,\n      border: `2px solid black`,\n      boxShadow: '0px 3px 0px black',\n    }}>\n    {size > 30 ? CHIP_VALUES[props.index] : undefined}\n  </div>\n}\n\n// This is gross lol\nfunction ChipArea(props: {\n  chips: number[],\n  onClick?: (index: number) => void,\n  setChips?: (newChips: number[]) => void,\n}) {\n  return <div style={{ display: \"flex\", backgroundColor: \"green\", justifyContent: \"center\", height: 200, }}>\n    {props.chips.map((c, i) => {\n      let columns = [];\n      let curCol = [];\n      const stackSize = 10;\n      for (let x = 0; x < c; x++) {\n        if (x % stackSize == 0 && curCol.length > 0) {\n          columns.push(<div style={{\n            display: \"flex\",\n            flexDirection: \"column-reverse\",\n            margin: 2,\n          }}>{curCol}</div>);\n          curCol = [];\n        }\n        curCol.push(<Chip index={i} draggable={x == c - 1 || x % stackSize == stackSize - 1} />)\n      }\n      if (curCol.length > 0) {\n        columns.push(<div style={{\n          display: \"flex\",\n          flexDirection: \"column-reverse\",\n          margin: 2,\n        }}>{curCol}</div>);\n      }\n      return <><div style={{\n        display: \"flex\",\n        minWidth: 80,\n        justifyContent: \"center\",\n        padding: 10,\n        paddingBottom: 50,\n        margin: 2,\n        borderLeft: \"1px solid gold\",\n        borderRight: \"1px solid gold\", position: \"relative\"\n      }}>\n        <div\n        onDrop={ev => {\n          ev.preventDefault();\n          const chipIndex = Number(ev.dataTransfer.getData(CHIP_DATA_KEY));\n          if(chipIndex != i){\n            console.log(`Trading chip ${chipIndex} ($${CHIP_VALUES[chipIndex]}) for ${i} ($${CHIP_VALUES[i]})`);\n            if(chipIndex < i){\n              // we are trading in for a bigger coin\n              if(props.chips[chipIndex] * CHIP_VALUES[chipIndex] >= CHIP_VALUES[i]){\n                const newChips = [...props.chips];\n                newChips[chipIndex] -= Math.floor(CHIP_VALUES[i] / CHIP_VALUES[chipIndex]);\n                newChips[i]++;\n                props.setChips?.(newChips);\n              }\n            }\n            else {\n              // we are trading for a lower coin\n              // this is probably OK, since we should be dragging it FROM the stack...\n              if(props.chips[chipIndex] > 0){\n                const newChips = [...props.chips];\n                newChips[chipIndex]--;\n                newChips[i] += Math.floor(CHIP_VALUES[chipIndex] / CHIP_VALUES[i]);\n                props.setChips?.(newChips);\n              }\n            }\n          }\n        }}\n        onDragOver={ev=>{\n          const chipIndex = Number(ev.dataTransfer.getData(CHIP_DATA_KEY));\n          if(chipIndex != i){\n            console.log(`Trading chip ${chipIndex} ($${CHIP_VALUES[chipIndex]}) for ${i} ($${CHIP_VALUES[i]})`);\n            if(chipIndex < i){\n              // we are trading in for a bigger coin\n              if(props.chips[chipIndex] * CHIP_VALUES[chipIndex] >= CHIP_VALUES[i]){\n                ev.preventDefault();\n                ev.dataTransfer.dropEffect = \"copy\";\n              }\n            }\n            else {\n              // we are trading for a lower coin\n              // this is probably OK, since we should be dragging it FROM the stack...\n              if(props.chips[chipIndex] > 0){\n                ev.preventDefault();\n                ev.dataTransfer.dropEffect = \"copy\";\n              }\n            }\n          }\n        }}\n        style={{ position: \"absolute\", top: 0, textAlign: \"center\", left: 0, right: 0, }}>${CHIP_VALUES[i]}</div>\n        {columns}\n      </div>\n        {/* {props.setChips && props.chips[i + 1] != undefined ?\n          <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", margin: 10, }}>\n            {props.chips[i + 1] > 0 ? <div>\n              <button onClick={()=>{\n                const newChips = [...props.chips];\n                newChips[i+1]--;\n                newChips[i] += Math.floor(CHIP_VALUES[i+1] / CHIP_VALUES[i]);\n                props.setChips?.(newChips);\n              }} style={{ fontSize: 14 }}>{\"<--\"}</button></div> : undefined}\n            {(props.chips[i] * CHIP_VALUES[i] >= CHIP_VALUES[i + 1]) ? <div>\n              <button  onClick={()=>{\n                const newChips = [...props.chips];\n                newChips[i] -= Math.floor(CHIP_VALUES[i+1] / CHIP_VALUES[i]);\n                newChips[i+1]++;\n                props.setChips?.(newChips);\n              }} style={{ fontSize: 14 }}>{\"-->\"}</button></div>: undefined}\n          </div> \n          : undefined} */}\n      </>;\n    })}\n  </div>\n}\n\ninterface PlacedBet {\n  type: BetTypes,\n  chipIndex: number,\n  winsOn: number[],\n}\n\nfunction WinsOnToType(winsOn: number[]): BetTypes {\n  switch (winsOn.length) {\n    case 1:\n      return \"straight\";\n    case 2:\n      return \"split\";\n    case 3:\n      return \"street\";\n    case 4: return \"square\";\n    case 12: return \"Columns\";\n    default:\n      throw \"HEY! bad type!\";\n  }\n}\n\nfunction App() {\n  const [roll, setRoll] = React.useState(0);\n  const [bets, setBets] = React.useState<PlacedBet[]>([]);\n\n  const [chips, setChips] = React.useState([10, 5, 1, 0, 0]);\n  const totalMoney = chips.reduce((p, c, i) => {\n    return p + (c * CHIP_VALUES[i]);\n  });\n\n  const [amount, setBetAmount] = React.useState(1);\n\n  const addBet = React.useCallback((bet: PlacedBet) => {\n    setBets([...bets, bet]);\n  }, [bets, setBets]);\n\n  const moveChip = (chipIndex: number) => {\n    let c = [...chips];\n    c[chipIndex] = Math.max(0, c[chipIndex] - 1);\n    setChips(c);\n  }\n\n  console.log(bets);\n\n  function createBetProps(winsOn: number[], type: BetTypes) {\n    return {\n      winsOn,\n      type,\n      onDrop: (chipIndex: number) => {\n        addBet({ chipIndex, winsOn, type });\n        moveChip(chipIndex);\n      },\n      placedBets: bets,\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Roulette</h1>\n      <div style={{ display: \"inline-flex\", flexDirection: \"column\" }}>\n        <InsideBets placedBets={bets} onBet={(winsOn, chipIndex) => {\n          moveChip(chipIndex);\n          // OK we really need a way to IDENTIFY the different BETS. Like an ID or code.\n          addBet({\n            chipIndex,\n            type: WinsOnToType(winsOn),\n            winsOn,\n          })\n        }} />\n        <div style={{ display: \"flex\", justifyContent: \"end\", marginTop: 4 }}>\n          <div style={{ flex: 1 }}></div>\n          <Bet name=\"1st 12\" flex=\"4\" margin={4} {...createBetProps(FIRST_12, \"Dozens\")} />\n          <Bet name=\"2nd 12\" flex=\"4\" margin={4} {...createBetProps(SECOND_12, \"Dozens\")} />\n          <Bet name=\"3rd 12\" flex=\"4\" margin={4}  {...createBetProps(THIRD_12, \"Dozens\")} />\n          <div style={{ width: 4 }}></div>\n          <div style={{ flex: 1 }}></div>\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"end\", marginTop: 4 }}>\n          <div style={{ flex: 1 }}></div>\n          <Bet name=\"1-18\" flex={2} margin={4}  {...createBetProps(ONE_TO_18, \"Lows\")} />\n          <Bet name=\"EVEN\" flex={2} margin={4} {...createBetProps(EVEN_NUMBERS, \"Evens\")} />\n          <Bet name=\"RED\" color=\"red\" flex={2} margin={4} {...createBetProps(RED_NUMBERS, \"Reds\")} />\n          <Bet name=\"GOLD\" flex={2} margin={4}  {...createBetProps(GOLD_NUMBERS, \"Blacks\")} />\n          <Bet name=\"ODD\" flex={2} margin={4}  {...createBetProps(ODD_NUMBERS, \"Odds\")} />\n          <Bet name=\"19-36\" flex={2} margin={4}  {...createBetProps(NINETEEN_TO_36, \"Highs\")} />\n          <div style={{ width: 4 }}></div>\n          <div style={{ flex: 1 }}></div>\n        </div>\n      </div>\n\n      <div style={{ backgroundColor: \"green\", fontSize: 24, padding: 10, color: \"gold\" }}>\n        Roll: <span style={{ color: GetColor(roll), textShadow: \"1px 2px rgba(0,0,0,.5)\" }}>{roll}</span>\n      </div>\n      <button onClick={() => {\n        const rollResult = RollWheel();\n        setRoll(rollResult);\n\n        // check all bets\n        const winningBets = bets.filter(b => b.winsOn.includes(rollResult));\n        setBets([]);\n\n        // ok pay them out!\n        const newChips = [...chips];\n        for (const wonBet of winningBets) {\n          newChips[wonBet.chipIndex] += BET_PAYOUTS[wonBet.type] + 1; // 1 is YOUR chip which you get back.\n          // WOW, winning a bet pays a LOT for a number.\n        }\n        setChips(newChips);\n      }}>Roll</button>\n      <div style={{ backgroundColor: \"green\", fontSize: 24, padding: 10, color: \"gold\" }}>\n        $<span style={{ textShadow: \"1px 2px rgba(0,0,0,.5)\" }}>{totalMoney}</span>\n      </div>\n      <ChipArea chips={chips} setChips={setChips} />\n    </div >\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}